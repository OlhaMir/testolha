import numpy as np
import matplotlib.pyplot as plt

# Введення даних
x_values = np.array([1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0])
y_values = np.array([10.517, 10.193, 9.807, 9.387, 8.977, 8.637, 8.442, 8.482, 8.862, 9.701, 11.132, 13.302])

# Функція для побудови таблиці різниць
def divided_diff_table(x, y):
    n = len(y)
    coef = np.zeros([n, n])
    # Заповнюємо перший стовпець таблиці значеннями y
    coef[:,0] = y

    for j in range(1, n):
        for i in range(n - j):
            coef[i][j] = (coef[i+1][j-1] - coef[i][j-1]) / (x[i+j] - x[i])

    return coef

# Функція для обчислення значення похідних
def newton_poly_derivatives(coef, x_data, x_val):
    n = len(x_data) - 1
    poly_first_derivative = coef[1][1]  # Перший коефіцієнт для першої похідної

    product = 1
    for i in range(1, n):
        product *= (x_val - x_data[i-1])
        poly_first_derivative += coef[1][i+1] * product

    # Обчислення другої похідної
    poly_second_derivative = 0
    product = 1
    for i in range(2, n):
        product *= (x_val - x_data[i-2])
        poly_second_derivative += coef[2][i] * product

    return poly_first_derivative, poly_second_derivative

# Побудова таблиці різниць Ньютона
coef_table = divided_diff_table(x_values, y_values)

# Обчислення похідних в точці x = 5.0
x_val = 5.0
first_derivative, second_derivative = newton_poly_derivatives(coef_table, x_values, x_val)

print("Таблиця кінцевих різниць:")
np.set_printoptions(precision=2, suppress=True)
print(coef_table)
print("Перша похідна в точці x = 5.0:", first_derivative)
print("Друга похідна в точці x = 5.0:", second_derivative)

# Побудова графіків функції та похідних
x_new = np.linspace(min(x_values), max(x_values), 1000)
y_interp = np.interp(x_new, x_values, y_values)

plt.figure(figsize=(10,8))

# Графік функції
plt.subplot(3, 1, 1)
plt.plot(x_values, y_values, 'bo', label="Дані")
plt.plot(x_new, y_interp, 'r-', label="Інтерпольована функція")
plt.title('Функція y=f(x)')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()

# Графік першої похідної (наближено через кінцеві різниці)
dy_dx = np.gradient(y_interp, x_new)
plt.subplot(3, 1, 2)
plt.plot(x_new, dy_dx, 'g-', label="Перша похідна")
plt.title('Перша похідна функції')
plt.xlabel('x')
plt.ylabel("dy/dx")
plt.legend()

# Графік другої похідної (наближено через кінцеві різниці)
d2y_dx2 = np.gradient(dy_dx, x_new)
plt.subplot(3, 1, 3)
plt.plot(x_new, d2y_dx2, 'b-', label="Друга похідна")
plt.title('Друга похідна функції')
plt.xlabel('x')
plt.ylabel("d²y/dx²")
plt.legend()

plt.tight_layout()
plt.show()
